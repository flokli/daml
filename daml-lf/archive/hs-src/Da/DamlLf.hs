{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Da.DamlLf where
import qualified Prelude as Hs
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Wire as HsProtobuf
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.ByteString.Lazy as BS
import qualified Data.Coerce as Hs
import qualified Data.String as Hs (fromString)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified Data.Proxy as Proxy
import qualified GHC.Generics as Hs
import qualified GHC.Enum as Hs
import qualified Unsafe.Coerce as Hs
import qualified Da.DamlLf1
import qualified Da.DamlLf0

data ArchivePayload = ArchivePayload{archivePayloadMinor ::
                                     Hs.Text,
                                     archivePayloadSum :: Hs.Maybe ArchivePayloadSum}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ArchivePayload where
        nameOf _ = (Hs.fromString "ArchivePayload")

instance HsProtobuf.Message ArchivePayload where
        encodeMessage _
          ArchivePayload{archivePayloadMinor = archivePayloadMinor,
                         archivePayloadSum = archivePayloadSum}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   archivePayloadMinor),
                case archivePayloadSum of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ArchivePayloadSumDamlLf0 y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     ((Hs.coerce @(Hs.Maybe Da.DamlLf0.Package)
                                         @(HsProtobuf.Nested Da.DamlLf0.Package))
                                        (Hs.Just y)))
                             ArchivePayloadSumDamlLf1 y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     ((Hs.coerce @(Hs.Maybe Da.DamlLf1.Package)
                                         @(HsProtobuf.Nested Da.DamlLf1.Package))
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure ArchivePayload) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap ArchivePayloadSumDamlLf0)) <*>
                     ((Hs.coerce @(_ (HsProtobuf.Nested Da.DamlLf0.Package))
                         @(_ (Hs.Maybe Da.DamlLf0.Package)))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap ArchivePayloadSumDamlLf1)) <*>
                     ((Hs.coerce @(_ (HsProtobuf.Nested Da.DamlLf1.Package))
                         @(_ (Hs.Maybe Da.DamlLf1.Package)))
                        HsProtobuf.decodeMessageField))])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "minor")
                []
                Hs.Nothing)]

instance HsJSONPB.ToJSONPB ArchivePayload where
        toJSONPB (ArchivePayload f3 f1_or_f2)
          = (HsJSONPB.object
               ["minor" .= f3,
                (let encodeSum
                       = (case f1_or_f2 of
                              Hs.Just (ArchivePayloadSumDamlLf0 f1)
                                -> (HsJSONPB.pair "daml_lf_0" f1)
                              Hs.Just (ArchivePayloadSumDamlLf1 f2)
                                -> (HsJSONPB.pair "daml_lf_1" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("Sum" .= (HsJSONPB.objectOrNull [encodeSum] options)) options else
                       encodeSum options)])
        toEncodingPB (ArchivePayload f3 f1_or_f2)
          = (HsJSONPB.pairs
               ["minor" .= f3,
                (let encodeSum
                       = (case f1_or_f2 of
                              Hs.Just (ArchivePayloadSumDamlLf0 f1)
                                -> (HsJSONPB.pair "daml_lf_0" f1)
                              Hs.Just (ArchivePayloadSumDamlLf1 f2)
                                -> (HsJSONPB.pair "daml_lf_1" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("Sum" .= (HsJSONPB.pairsOrNull [encodeSum] options)) options else
                       encodeSum options)])

data ArchivePayloadSum = ArchivePayloadSumDamlLf0 Da.DamlLf0.Package
                       | ArchivePayloadSumDamlLf1 Da.DamlLf1.Package
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ArchivePayloadSum where
        nameOf _ = (Hs.fromString "ArchivePayloadSum")

data HashFunction = HashFunctionSHA256
                  deriving (Hs.Show, Hs.Bounded, Hs.Eq, Hs.Ord, Hs.Generic,
                            Hs.NFData)

instance HsProtobuf.Named HashFunction where
        nameOf _ = (Hs.fromString "HashFunction")

instance Hs.Enum HashFunction where
        toEnum 0 = HashFunctionSHA256
        toEnum i = (Hs.toEnumError "HashFunction" i (0 :: Hs.Int, 0))
        fromEnum (HashFunctionSHA256) = 0
        succ _ = Hs.succError "HashFunction"
        pred _ = Hs.predError "HashFunction"

instance HsProtobuf.Finite HashFunction

data Archive = Archive{archiveHashFunction ::
                       HsProtobuf.Enumerated Da.DamlLf.HashFunction,
                       archivePayload :: BS.ByteString, archiveHash :: Hs.Text}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named Archive where
        nameOf _ = (Hs.fromString "Archive")

instance HsProtobuf.Message Archive where
        encodeMessage _
          Archive{archiveHashFunction = archiveHashFunction,
                  archivePayload = archivePayload, archiveHash = archiveHash}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   archiveHashFunction),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   archivePayload),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   archiveHash)])
        decodeMessage _
          = (Hs.pure Archive) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "HashFunction")))
                (HsProtobuf.Single "hash_function")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "payload")
                []
                Hs.Nothing),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "hash")
                []
                Hs.Nothing)]
